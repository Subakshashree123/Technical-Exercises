                          FITNESS TRACKER DATA


from pyspark.sql import SparkSession
from pyspark.sql.functions import sum,rank

# Create a Spark session
spark = SparkSession.builder.appName("FitnessTracker").getOrCreate()

# Sample data
data = [
    (1, '2023-07-01', 12000, 500, 8.5, 90),
    (2, '2023-07-01', 8000, 350, 5.6, 60),
    (3, '2023-07-01', 15000, 600, 10.2, 120),
    (1, '2023-07-02', 11000, 480, 7.9, 85),
    (2, '2023-07-02', 9000, 400, 6.2, 70),
    (3, '2023-07-02', 13000, 520, 9.0, 100),
    (1, '2023-07-03', 10000, 450, 7.1, 80),
    (2, '2023-07-03', 7000, 320, 4.9, 55),
    (3, '2023-07-03', 16000, 620, 11.0, 130)
]

# Define schema for the data
columns = ['user_id', 'date', 'steps', 'calories', 'distance_km', 'active_minutes']

# Create DataFrame
df = spark.createDataFrame(data, schema=columns)
df.show()

#1. Calculate the total steps  taken by each user across all days.
total_steps = df.groupBy("user_id").agg(sum("steps").alias("total_steps"))
total_steps.show()


from pyspark.sql.window import Window
from pyspark.sql.functions import col, row_number,avg


#2.Filter Days Where a User Burned More Than 500 Calories
 #Identify all days where a user burned more than 500 calories.

high_calories = df.filter(df.calories > 500)
high_calories.show()


#3. Calculate the Average Distance Traveled by Each User
#Calculate the average distance traveled ( distance_km ) by each user across all days.

average_distance = df.groupBy("user_id").agg(avg("distance_km").alias("average_distance"))
average_distance.show()


#4. Identify the Day with the Maximum Steps for Each User
 #For each user, find the day when they took the maximum number of steps.

window_spec = Window.partitionBy("user_id").orderBy(col("steps").desc())
df_with_row_number = df.withColumn("row_number", row_number().over(window_spec))
max_steps_per_user = df_with_row_number.filter(col("row_number") == 1).select("user_id", "date", "steps")
max_steps_per_user.show()


#5. Find Users Who Were Active for More Than 100 Minutes on Any Day
 #Identify users who had active minutes greater than 100 on any day. 

active_users = df.filter(df.active_minutes > 100).select("user_id", "date", "active_minutes").distinct()
active_users.show()


#6. Calculate the Total Calories Burned per Day
#Group by date and calculate the total number of calories burned by all users combined for each day.

total_calories_per_day = df.groupBy("date").agg(sum("calories").alias("total_calories"))
total_calories_per_day.show()


#7. Calculate the Average Steps per Day
#Find the average number of steps taken across all users for each day.

average_steps_per_day = df.groupBy("date").agg(avg("steps").alias("average_steps"))
average_steps_per_day.show()

    
#8. Rank Users by Total Distance Traveled
#Rank the users by their total distance traveled, from highest to lowest

total_distance_by_user = df.groupBy("user_id").agg(sum("distance_km").alias("total_distance"))
window_spec = Window.orderBy(col("total_distance").desc())
ranked_users = total_distance_by_user.withColumn("rank", rank().over(window_spec))
ranked_users.show()


#9.. Find the Most Active User by Total Active Minutes
 #Identify the user with the highest total active minutes across all days.

total_active_minutes_by_user = df.groupBy("user_id").agg(sum("active_minutes").alias("total_active_minutes"))
most_active_user = total_active_minutes_by_user.orderBy(col("total_active_minutes").desc()).limit(1)
most_active_user.show()


#10. Create a New Column for Calories Burned per Kilometer
#Add a new column called calories_per_km that calculates how many calories were burned per kilometer (calories / distance_km ) for each row.

df_with_calories_per_km = df.withColumn("calories_per_km", col("calories") / col("distance_km"))
df_with_calories_per_km.show()



