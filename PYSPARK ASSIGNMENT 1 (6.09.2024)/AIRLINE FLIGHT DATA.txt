                                 AIRLINE FLIGHT DATA


from pyspark.sql import SparkSession
from pyspark.sql.functions import col, sum ,avg

# Create a Spark session
spark = SparkSession.builder.appName("FlightData").getOrCreate()

# Sample data
data = [
    (1, 'Delta', 'DL123', 'JFK', 'LAX', '08:00', '11:00', 30, 3970, '2023-07-01'),
    (2, 'United', 'UA456', 'SFO', 'ORD', '09:30', '15:00', 45, 2960, '2023-07-01'),
    (3, 'Southwest', 'SW789', 'DAL', 'ATL', '06:00', '08:30', 0, 1150, '2023-07-01'),
    (4, 'Delta', 'DL124', 'LAX', 'JFK', '12:00', '20:00', 20, 3970, '2023-07-02'),
    (5, 'American', 'AA101', 'MIA', 'DEN', '07:00', '10:00', 15, 2770, '2023-07-02'),
    (6, 'United', 'UA457', 'ORD', 'SFO', '11:00', '14:30', 0, 2960, '2023-07-02'),
    (7, 'JetBlue', 'JB302', 'BOS', 'LAX', '06:30', '09:45', 10, 4180, '2023-07-03'),
    (8, 'American', 'AA102', 'DEN', 'MIA', '11:00', '14:00', 25, 2770, '2023-07-03'),
    (9, 'Southwest', 'SW790', 'ATL', 'DAL', '09:00', '11:00', 5, 1150, '2023-07-03'),
    (10, 'Delta', 'DL125', 'JFK', 'SEA', '13:00', '17:00', 0, 3900, '2023-07-04')
]

# Define schema for the data
columns = ['flight_id', 'airline', 'flight_number', 'origin', 'destination', 'departure_time', 'arrival_time', 'delay_min', 'distance', 'date']

# Create DataFrame
df = spark.createDataFrame(data, schema=columns)
df.show()


# 1.Group by airline and calculate the total distance traveled
total_distance_per_airline = df.groupBy("airline").agg(
    sum("distance").alias("total_distance_traveled"))
total_distance_per_airline.show()

#2. Filter Flights with Delays Greater than 30 Minutes
#Filter the dataset to show only flights where the delay was greater than 30 minutes.

flights_with_delays = df.filter(col("delay_min") > 30)
flights_with_delays.show()


#3. Find the Flight with the Longest Distance
 #Identify the flight that covered the longest distance

longest_distance_flight = df.orderBy(col("distance").desc()).first()
print("Flight with the longest distance:")
print(longest_distance_flight)


#4.Calculate the Average Delay Time for Each Airline
#Group the data by airline and calculate the average delay time in minutes for each airline.

average_delay_per_airline = df.groupBy("airline").agg(
    avg("delay_min").alias("average_delay_minutes"))
average_delay_per_airline.show()


#5.Identify Flights That Were Not Delayed
#Filter the dataset to show only flights with delay_minutes = 0 

flights_not_delayed = df.filter(col("delay_min") == 0)
flights_not_delayed.show()


#6. Find the Top 3 Most Frequent Routes
#Group the data by origin and destination to find the top 3 most frequent flight routes

top_routes = df.groupBy("origin", "destination").agg(
    count("flight_id").alias("route_count")
).orderBy(col("route_count").desc())

# Get the top 3 most frequent routes
top_3_routes = top_routes.limit(3)
top_3_routes.show()


#7. Calculate the Total Number of Flights per Day
#Group the data by date and calculate the total number of flights on each day.

flights_per_day = df.groupBy("date").agg(
    count("flight_id").alias("total_flights")
).orderBy("date")
flights_per_day.show()


#8. Find the Airline with the Most Flights
#Identify the airline that operated the most flights.

flights_by_airline = df.groupBy("airline").agg(
    count("flight_id").alias("total_flights")
).orderBy(col("total_flights").desc())

# Get the airline with the most flights
most_flights_airline = flights_by_airline.limit(1)
most_flights_airline.show()


#9.. Calculate the Average Flight Distance per Day
#Group the data by date and calculate the average flight distance for each day.

average_distance_per_day = df.groupBy("date").agg(
    avg("distance").alias("average_distance")
).orderBy("date")
average_distance_per_day.show()


#10. Create a New Column for On-Time Status
#Add a new column called on_time that indicates whether a flight was on time (True if delay_minutes = 0 , otherwise False )

from pyspark.sql.functions import when
df_with_status = df.withColumn(
    "on_time",
    when(col("delay_min") == 0, True).otherwise(False))
df_with_status.show()

