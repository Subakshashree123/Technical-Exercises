                          E-COMMERCE TRANSACTIONS

from pyspark.sql import SparkSession
from pyspark.sql.functions import col, sum, expr,avg

# Create a Spark session
spark = SparkSession.builder.appName("E-commerce Transactions").getOrCreate()

# Sample data
data = [
    (1, 101, "Laptop", "Electronics", 1000, 1, 10, "2023-08-01"),
    (2, 102, "Smartphone", "Electronics", 700, 2, 5, "2023-08-01"),
    (3, 103, "Shirt", "Fashion", 40, 3, 0, "2023-08-02"),
    (4, 104, "Blender", "Home Appliance", 150, 1, 15, "2023-08-03"),
    (5, 101, "Headphones", "Electronics", 100, 2, 10, "2023-08-03"),
    (6, 105, "Shoes", "Fashion", 60, 1, 20, "2023-08-04"),
    (7, 106, "Refrigerator", "Home Appliance", 800, 1, 25, "2023-08-05"),
    (8, 107, "Book", "Books", 20, 4, 0, "2023-08-05"),
    (9, 108, "Toaster", "Home Appliance", 30, 1, 5, "2023-08-06"),
    (10, 102, "Tablet", "Electronics", 300, 2, 10, "2023-08-06")
]

# Define the schema
columns = ["transaction_id", "customer_id", "product", "category", "price", "quantity", "discount_percentage", "transaction_date"]

# Create DataFrame
df = spark.createDataFrame(data, columns)
df.show()

#1. Calculate total revenue per category
df_with_revenue = df.withColumn(
    "revenue",
    (col("price") * col("quantity")) * (1 - col("discount_percentage") / 100)
)

# Group by category and calculate total revenue
total_revenue_per_category = df_with_revenue.groupBy("category").agg(
    sum("revenue").alias("total_revenue")
)
total_revenue_per_category.show()


#2.Filter Transactions with a Discount Greater Than 10%
#Filter the dataset to show only transactions where the discount percentage is greater than 10%.

filtered_df = df.filter(col("discount_percentage") > 10)
filtered_df.show()


#3.Find the Most Expensive Product Sold
#Identify the product with the highest individual price.

most_expensive_product = df.orderBy(col("price").desc()).limit(1)
most_expensive_product.show()


#4. Calculate the Average Quantity of Products Sold per Category
#Group the data by category and calculate the average quantity of products sold in each category.

avg_quantity_per_category = df.groupBy("category").agg(
    avg("quantity").alias("avg_quantity"))

avg_quantity_per_category.show()


#5. Identify Customers Who Purchased More Than One Product
#Filter the data to show only customers who purchased more than one product in a single transaction.

multiple_products_df = df.filter(col("quantity") > 1)
multiple_products_df.show()


#6.Find the Top 3 Highest Revenue Transactions
#Calculate the total revenue for each transaction and identify the top 3 highest revenue transactions.

df_with_revenue = df.withColumn("revenue", (col("price") * col("quantity")) * (1 - col("discount_percentage") / 100))
top_3_revenue_transactions = df_with_revenue.orderBy(col("revenue").desc()).limit(3)
top_3_revenue_transactions.show()


#7. Calculate the Total Number of Transactions per Day
#Group the data by transaction_date and calculate the total number of transactions for each day.

from pyspark.sql.functions import count
transactions_per_day = df.groupBy("transaction_date").agg(count("transaction_id").alias("total_transactions"))
transactions_per_day.show()


#8. Find the Customer Who Spent the Most Money
#Calculate the total amount spent by each customer and identify the customer with the highest total spending.

customer_spending = df.withColumn( "total_spent", (col("price") * col("quantity")) * (1 - col("discount_percentage") / 100)).groupBy("customer_id").agg(
    sum("total_spent").alias("total_spent"))
customer_with_highest_spending = customer_spending.orderBy(col("total_spent").desc()).limit(1)
customer_with_highest_spending.show()


#9. Calculate the Average Discount Given per Product Category
#Group the data by category and calculate the average discount percentage applied to products in each category.

avg_discount_per_category = df.groupBy("category").agg(
    avg("discount_percentage").alias("avg_discount"))
avg_discount_per_category.show()


#10. Create a New Column for Final Price After Discount
#Add a new column final_price that calculates the total price after applying the discount ( price - (price * discount_percentage / 100) ).

df_with_final_price = df.withColumn("final_price", col("price") * col("quantity") * (1 - col("discount_percentage") / 100))
df_with_final_price.show()

