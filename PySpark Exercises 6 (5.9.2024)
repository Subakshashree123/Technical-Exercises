1. **Load the Dataset**:
#Read the CSV file into a PySpark DataFrame

from pyspark.sql import SparkSession

#Initialize SparkSessioin
spark = SparkSession.builder.appName("MovieDataTransformations").getOrCreate()
movie_df = spark.read.csv("/content/sample_data/movies_data.csv", header=True, inferSchema=True)

# Step 3: Show the loaded DataFrame
movie_df.show()


2.Filter Movies by Genre**:
#Find all movies in the "Sci-Fi" genre.
from pyspark.sql.functions import col,avg,count

movie_filter = movie_df.filter(col("genre")== "Sci-Fi")
movie_filter.show()


3.Top-Rated Movies**:
#Find the top 3 highest-rated movies.

top_rated_movies = movie_df.orderBy(col("rating").desc()).limit(3)
top_rated_movies.show()


4. **Movies Released After 2010**:
#Filter out all movies released after the year 2010.

movies_after_2010 = movie_df.filter(col("date") > "2010-01-01")
movies_after_2010.show()


5.Calculate Average Box Office Collection by Genre**:
#Group the movies by `genre` and calculate the average box office collection for each genre.

avg_box_office_coll= movie_df.groupBy("genre").agg(avg("box_office").alias("avg_box_office"))
avg_box_office_coll.show()



6. **Add a New Column for Box Office in Billions**:
#Add a new column that shows the box office collection in billions.

boxoffice_with_billions = movie_df.withColumn("box_office_in_billions", col("box_office") / 1_000_000_000)
boxoffice_with_billions.show()


7.Sort Movies by Box Office Collection**:
#Sort the movies in descending order based on their box office collection.

sorted_movies = movie_df.orderBy(col("box_office").desc())
sorted_movies.show()



8. **Count the Number of Movies per Genre**:
#Count the number of movies in each genre.

movies_count_by_genre = movie_df.groupBy("genre").agg(count("movie_id").alias("movie_count"))
movies_count_by_genre.show()

